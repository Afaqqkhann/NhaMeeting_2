<?php

namespace App\Http\Controllers;

use Auth;
use App\Models\Employees\Employees;
use App\User;
use App\Role;
use App\Permission;

use DB;
use Validator;
use Redirect;
use Datatables;
use URL;
use Session;

use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\File;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class UserController extends Controller {

	/**
	 * Display a listing of the resource.
	 *
	 * @return Response
	 */
	public function index()
	{
		$users = User::all();		
		return view('user.index', compact('users'));
	}

	public function update_password(Request $request) {
		$validation = Validator::make($request->all(),
			['password' => 'required|min:5|max:15',
			 'confirm_password' => 'required|same:password']);

		if ($validation->fails())
		{
			return redirect()->back()->withInput()->withErrors($validation->errors());
		}
		$this->user->password = bcrypt($request->password);
		$this->user->save();
	}
	
	/**
	 * Show the form for creating a new resource.
	 *
	 * @return Response
	 */
	public function create()
	{
		$userTypes = UserType::all();
        $userTypeSelection = array(NULL => 'Select User Type');
        foreach($userTypes as $userType){
            $userTypeSelection[$userType->user_type_id] = $userType->name;
        }
        return View::make('user.create')
            ->with('userTypes', $userTypeSelection);
	}


	/**
	 * Store a newly created resource in storage.
	 *
	 * @return Response
	 */
	public function store()
	{

		$rules = array(
            'username' => 'required',
            'user_type_id' => 'required',
            'password' => 'required',
            'rpassword' => 'required|same:password',
            'user_level' => 'required',
            'email' => 'required|email'
        );

        $validator = Validator::make(Input::all(), $rules);

        if($validator->fails()){
            return Redirect::to('user/create')
                ->withErrors($validator)
                ->withInput();
        } else {
            $username = Input::get('username');
            $userTypeId = Input::get('user_type_id');
            $password = Hash::make(Input::get('password'));
            $email = Input::get('email');
            $userLevel = Input::get('user_level');

            $user = new User();
            $user->id = User::orderBy('id', 'desc')->first()->id + 1;
            $user->username = $username;
            $user->user_type_id = $userTypeId;
            $user->password = $password;
            $user->email = $email;
            $user->user_level = $userLevel;
            $user->save();

            return Redirect::to('user');
        }
	}


	/**
	 * Display the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($id)
	{
		$user = User::find($id);
        return View::make('user.show')
            ->with('user', $user);
	}


	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
        $user = User::find($id);

        $roles = array(null => 'Select Role');
        $role = Role::all();

        foreach($role as $row){
            $roles[$row->id] = $row->display_name;
        }
		
        return view('user.edit', compact('user', 'roles'));
	}


	/**
     * Update the specified resource in storage.
     *
     * @param  Request  $request
     * @param  int  $id
     * @return Response
     */
	public function update(Request $request, $id)
	{
        $rules = array(
            'role_id' => 'required'
        );

        $validator = Validator::make($request->all(), $rules);

        if($validator->fails()){
            return Redirect::to('user.create')
                ->withErrors($validator)
                ->withInput();
        } else {

            $user = User::find($id);
			$role = Role::find($request->input('role_id'));

			if($user->save()){
				DB::table('role_user')
					->where('user_id', $id)
					->delete();

				$user->attachRole($role);
			}

			return Redirect::to('user');
        }
	}


	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id)
	{
		DB::table('TBL_USERS')->where('id', '=', $id)->delete();

        return Redirect::to('user');
	}


    public function login(){

        $username = Input::get('username');
        $password = Input::get('password');

        $cradentials = array(
            'username' => $username,
            'password' => $password
        );

        if(Auth::attempt($cradentials)){
            return Redirect::to('dashboard');
        } else {
            return Redirect::to('login');
        }

    }

	public function update_profile() {
		$user = Auth::user();
		
		return view('user.edit_profile', compact('user'));
	}
	
	public function save_profile(Request $request) {
			
		$validation = Validator::make($request->all(),
			[
				'password' 				=> 	'required|min:5',
				'password_confirmation' =>  'required|same:password',
				'profile_picture'		=>	'mimes:jpeg,bmp,png,jpg|max:1000',
			 ]);

		if ($validation->fails())
		{
			return redirect()->back()->withInput()->withErrors($validation->errors());
		}
		
		$user = User::find(Auth::id());
		$emp = Employees::find(Auth::user()->emp_id);
		$user->password = bcrypt($request->password);
		
		if ($request->hasFile('profile_picture')) {
			$file = $request->file('profile_picture');
			$imageName = $emp->fp_id . '.' . $file->getClientOriginalExtension();;
			$request->file('profile_picture')->move(
				base_path() . '/storage/emp_pic/', $imageName
			);
        }
		
        $user->save();
		
		Session::flash('success', 'Profile updated successfully.');
		
		return Redirect::to('/user/update_profile');
	}
	
	/**
     * Get data for datatable.
     *
     * @param  
     * @return \Illuminate\Http\Response
     */
    public function get_data()
    {
        //
		//$users = User::select(['NAME', 'USERNAME', 'STATUS']);
		$users = DB::table('USERS U')->select(['U.ID', 'U.NAME', 'U.USERNAME', 'R.DISPLAY_NAME', 'U.STATUS'])->join('ROLE_USER RU', 'RU.USER_ID', '=', 'U.ID')->join('ROLES R', 'R.ID', '=', 'RU.ROLE_ID');
		return Datatables::of($users)
			->editColumn('display_name', '@if ($display_name == "Administrator") <div class="label bg-blue">{{$display_name}}</div> @else <div class="label bg-yellow">{{$display_name}}</div> @endif')
			->editColumn('status', '@if ($status == 1) <div class="label bg-green">Active</div> @else <div class="label bg-red">Blocked</div> @endif')
			->addColumn('action', function ($users) {
                return '<center><a href="'.URL::to('/user').'/'.$users->id.'/edit" class="btn btn-xs btn-primary"><i class="fa fa-edit"></i>  Edit</a></center>';
            })
			->removeColumn('id')
            ->make();
    }
}
